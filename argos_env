#!/usr/bin/env bash
# 
# Argos env for building packages in clean chroot
#

lowerdir="write the name of the folder to be used as readonly layer for squashfs/iso/img chroot"
rwdir="write the name of the folder to be used as read/write layer for squashfs/iso/img chroot"
chrootdir="write the name of the folder to be mounted as overlayfs between readonly layer and read/write layer"
chrootuser="root"
chrootcmd="write the commands you want to be executed in squashfs/iso/img chroot"
chrootname="write the name of your squashfs/iso/img chroot in here"
chroothash="write the md5sum of your squashfs/iso/img chroot in here"

integrity_check () {
	# check the integrity of squashfs/iso/img chroot, if matches break the loop and proceed to build
	# else download it again to be sure the environment is always the same
	while :
	do
		if [[ $(md5sum "$chrootname" | awk {'print $1'}) = "$chroothash" ]] ; then
			echo ""
			echo "chroot integrity seems OK...mounting and proceeding to build package"
			echo ""
			break
		else
			echo ""
			echo "chroot integrity seems corrupted...downloading again"
			echo ""
			# insert download link in here
		fi
	done
}

create_dirs () {
	# create the directory needed for overlayfs mount
	mkdir "$rwdir"
	mkdir "$lowerdir"
	mkdir "$chrootdir"
}

startchroot () {
	# mount squashfs/iso/img (readonly) chroot and add rw layer on top of it
	# mount them as overlayfs, so everything we do it will be done in rw layer
	# this way build env is always the same, no matter what
	mount "$chrootname" "$lowerdir"
	mount -t overlayfs -o lowerdir="$lowerdir",upperdir="$rwdir" overlayfs "$chrootdir"
	mount -o bind /proc "$chrootdir"/proc
	mount -o bind /sys "$chrootdir"/sys
	mount -o bind /dev "$chrootdir"/dev
	mount -o bind /dev/pts "$chrootdir"/dev/pts
	mount -o bind /dev/shm "$chrootdir"/dev/shm
	mount -o bind /tmp "$chrootdir"/tmp
}

stopchroot () {
	umount -l "$chrootdir"/proc
	umount -l "$chrootdir"/sys
	umount -l "$chrootdir"/dev/pts
	umount -l "$chrootdir"/dev/shm
	umount -l "$chrootdir"/dev
	umount -l "$chrootdir"/tmp
	umount -l "$chrootdir"
	umount -l "$lowerdir"
}

clean_build () {
	# run defined commands in the overlayfs chroot
	# everything will be writen in rw layer, original env stays untouched
	chroot "$chrootdir" su - "$chrootuser" -c "$chrootcmd"
}

cleanup () {
	rm -rf "$chrootdir"
	rm -rf "$lowerdir"
	rm -rf "$rwdir"
}

main () {
	integrity_check
	create_dirs
	startchroot
	clean_build
	stopchroot
	#cleanup
}

main 
exit 0
