#!/usr/bin/env bash
# 
# Argos env for building packages in clean chroot
#

lowerdir="lowerdir"
rwdir="rwdir"
chrootdir="chrootdir"
chrootuser="root"
chrootname="argos.squashfs"
chroothash="b6bcd3f153b6a45df74b262e88bfdd2b"
chroot_packages="$@"
chroot_build="emerge -av "$chroot_packages" && equo rescue spmsync"
chroot_upload="eit add "$chroot_packages""

integrity_check () {
	# check the integrity of squashed chroot, if matches break the loop and proceed to build
	# else download it again to be sure the environment is always the same
	while :
	do
		if [[ $(md5sum "$chrootname" | awk {'print $1'}) = "$chroothash" ]] ; then
			echo ""
			echo "chroot integrity seems OK...mounting and proceeding to build package"
			echo ""
			break
		else
			echo ""
			echo "chroot integrity seems corrupted...downloading again"
			echo ""
			# insert download link in here
		fi
	done
}

create_dirs () {
	# create the directory needed for overlayfs mount
	mkdir "$rwdir"
	mkdir "$lowerdir"
	mkdir "$chrootdir"
}

startchroot () {
	# mount squashed(readonly) chroot and add rw layer on top of it
	# mount them as overlayfs, so everything we do it will be done in rw layer
	# this way build env is always the same, no matter what
	mount "$chrootname" "$lowerdir"
	mount -t overlayfs -o lowerdir="$lowerdir",upperdir="$rwdir" overlayfs "$chrootdir"
	mount -o bind /proc "$chrootdir"/proc
	mount -o bind /sys "$chrootdir"/sys
	mount -o bind /dev "$chrootdir"/dev
	mount -o bind /dev/pts "$chrootdir"/dev/pts
	mount -o bind /dev/shm "$chrootdir"/dev/shm
	mount -o bind /tmp "$chrootdir"/tmp
}

stopchroot () {
	umount -l "$chrootdir"/proc
	umount -l "$chrootdir"/sys
	umount -l "$chrootdir"/dev/pts
	umount -l "$chrootdir"/dev/shm
	umount -l "$chrootdir"/dev
	umount -l "$chrootdir"/tmp
	umount -l "$chrootdir"
	umount -l "$lowerdir"
}

build_packages () {
	# build packages in squashfs chroot
	chroot "$chrootdir" su - "$chrootuser" -c "$chroot_build"
}

upload_packages () {
	# upload built packages to repositories
	chroot "$chrootdir" su - "$chrootuser" -c "$chroot_upload"
}

cleanup () {
	rm -rf "$chrootdir"
	rm -rf "$lowerdir"
	rm -rf "$rwdir"
}

main () {
	integrity_check
	create_dirs
	startchroot
	build_packages
	upload_packages
	stopchroot
	#cleanup
}

main 
exit 0
